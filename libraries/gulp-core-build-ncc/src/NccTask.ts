import {GulpTask, IBuildConfig} from '@microsoft/gulp-core-build';
import * as ncc from '@zeit/ncc';
import * as fs from 'fs-extra';

/**
 * @public
 */
export interface INccOptions {
  cache?: string | boolean;
  externals?: string[];
  filterAssetBase?: string;
  minify?: boolean;
  sourceMap?: boolean;
  sourceMapBasePrefix?: string;
  sourceMapRegister?: boolean;
  v8cache?: boolean;
}

/**
 * @public
 */
export interface INccTaskConfig {
  /**
   * ncc config object.
   */
  config?: INccOptions;

  /**
   * Input file to pass to ncc for compilation.
   */
  inputFile?: string;

  /**
   * Output file to write the compiled output generated by ncc to.
   */
  outputFile?: string;
}

/**
 * @public
 */
export class NccTask extends GulpTask<INccTaskConfig> {
  constructor() {
    super(
      'ncc',
      {
        inputFile: './src/index.ts',
        outputFile: './dist/index.js'
      }
    );
  }

  public async executeTask(): Promise<void> {
    const output: Output = await ncc(this.taskConfig.inputFile, {
      ...this.taskConfig.config,
      quiet: true
    });

    const path: string = this.resolvePath(this.taskConfig.outputFile || './dist/index.js');

    if (!!output.code) {
      await fs.ensureFile(path);

      await fs.writeFile(path, output.code, 'utf8');
    }

    if (!!output.map) {
      await fs.ensureFile(`${path}.map`);

      await fs.writeFile(`${path}.map`, output.code, 'utf8');
    }
  }

  public isEnabled(buildConfig: IBuildConfig): boolean {
    return super.isEnabled(buildConfig) && !!this.taskConfig.inputFile && !!this.taskConfig.outputFile;
  }
}

/**
 * @private
 */
type Output = {
  code: string,
  map: string
};
